
On-demand-Traffic-light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e6  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097e  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8c  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000033d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062c  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000663  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000428f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2d 02 	call	0x45a	; 0x45a <main>
  74:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <PEDESTRIAN_MODE>:
//////////////////////////////////////////////////////////////////////////
//Pedestrian  MODE														//
//////////////////////////////////////////////////////////////////////////

void PEDESTRIAN_MODE()
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
	//If pressed when the cars' Red LED is on
	if(DIO_read(CARS_PORT,RED_CARS_PIN) == HIGH)
  80:	62 e0       	ldi	r22, 0x02	; 2
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	b9 f4       	brne	.+46     	; 0xba <PEDESTRIAN_MODE+0x3e>
  8c:	04 c0       	rjmp	.+8      	; 0x96 <PEDESTRIAN_MODE+0x1a>
	{
		for(int i =0 ; i <= 9; i++)
		{
			Timer0_Delay_250mSec();
  8e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
void PEDESTRIAN_MODE()
{
	//If pressed when the cars' Red LED is on
	if(DIO_read(CARS_PORT,RED_CARS_PIN) == HIGH)
	{
		for(int i =0 ; i <= 9; i++)
  92:	21 96       	adiw	r28, 0x01	; 1
  94:	02 c0       	rjmp	.+4      	; 0x9a <PEDESTRIAN_MODE+0x1e>
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	ca 30       	cpi	r28, 0x0A	; 10
  9c:	d1 05       	cpc	r29, r1
  9e:	bc f3       	brlt	.-18     	; 0x8e <PEDESTRIAN_MODE+0x12>
		{
			Timer0_Delay_250mSec();
		}
		LED_PEDS_YELLOW_Blink();
  a0:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_PEDS_YELLOW_Blink>
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, LOW);
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(CARS_PORT,RED_CARS_PIN, LOW);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
  b8:	78 c0       	rjmp	.+240    	; 0x1aa <PEDESTRIAN_MODE+0x12e>
		
	}
	//If pressed when the cars' Green LED is on or the cars' Yellow LED is blinking
	else if(DIO_read(CARS_PORT,GREEN_CARS_PIN) || (DIO_read(CARS_PORT,YELLOW_CARS_PIN) == HIGH && DIO_read(PED_PORT,RED_PED_PIN) == LOW))
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
  c2:	81 11       	cpse	r24, r1
  c4:	0a c0       	rjmp	.+20     	; 0xda <PEDESTRIAN_MODE+0x5e>
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	b1 f5       	brne	.+108    	; 0x13c <PEDESTRIAN_MODE+0xc0>
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
  d6:	81 11       	cpse	r24, r1
  d8:	31 c0       	rjmp	.+98     	; 0x13c <PEDESTRIAN_MODE+0xc0>
	{
		LED_ON_OFF(PED_PORT,RED_PED_PIN, HIGH);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LEDs_Blink();
  e4:	0e 94 19 01 	call	0x232	; 0x232 <LEDs_Blink>
		
		LED_ON_OFF(CARS_PORT,GREEN_CARS_PIN, LOW);		
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(CARS_PORT,RED_CARS_PIN, HIGH);			
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PED_PORT,RED_PED_PIN, LOW);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, HIGH);
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		//Delay for 5 seconds
		for(int i =0 ; i <= 9; i++)
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	03 c0       	rjmp	.+6      	; 0x11c <PEDESTRIAN_MODE+0xa0>
		{
			Timer0_Delay_250mSec();
 116:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
		LED_ON_OFF(CARS_PORT,GREEN_CARS_PIN, LOW);		
		LED_ON_OFF(CARS_PORT,RED_CARS_PIN, HIGH);			
		LED_ON_OFF(PED_PORT,RED_PED_PIN, LOW);
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, HIGH);
		//Delay for 5 seconds
		for(int i =0 ; i <= 9; i++)
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	ca 30       	cpi	r28, 0x0A	; 10
 11e:	d1 05       	cpc	r29, r1
 120:	d4 f3       	brlt	.-12     	; 0x116 <PEDESTRIAN_MODE+0x9a>
		{
			Timer0_Delay_250mSec();
		}		
		
		LEDs_Blink();
 122:	0e 94 19 01 	call	0x232	; 0x232 <LEDs_Blink>
		LED_ON_OFF(CARS_PORT,RED_CARS_PIN, LOW);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, LOW);
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
 13a:	37 c0       	rjmp	.+110    	; 0x1aa <PEDESTRIAN_MODE+0x12e>
	}
	//  if BUTTON  PRESSED WHILE CARS GREEN LED IS OFF AND RED PED LED IS ON --> (CARS YELLOW LED IS BLINKING)
	else if (DIO_read(CARS_PORT, GREEN_CARS_PIN) == LOW && DIO_read(PED_PORT, RED_PED_PIN) == HIGH)
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
 144:	81 11       	cpse	r24, r1
 146:	31 c0       	rjmp	.+98     	; 0x1aa <PEDESTRIAN_MODE+0x12e>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	59 f5       	brne	.+86     	; 0x1aa <PEDESTRIAN_MODE+0x12e>
	{
		LEDs_Blink();
 154:	0e 94 19 01 	call	0x232	; 0x232 <LEDs_Blink>
		
		LED_ON_OFF(CARS_PORT,RED_CARS_PIN, HIGH);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PED_PORT, RED_PED_PIN, LOW);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, HIGH);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(CARS_PORT,GREEN_CARS_PIN, LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		
		//Delay for 5 seconds
		for(int i =0 ; i <= 9; i++)
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	03 c0       	rjmp	.+6      	; 0x18c <PEDESTRIAN_MODE+0x110>
		{
			Timer0_Delay_250mSec();
 186:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
		LED_ON_OFF(PED_PORT, RED_PED_PIN, LOW);
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, HIGH);
		LED_ON_OFF(CARS_PORT,GREEN_CARS_PIN, LOW);
		
		//Delay for 5 seconds
		for(int i =0 ; i <= 9; i++)
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	ca 30       	cpi	r28, 0x0A	; 10
 18e:	d1 05       	cpc	r29, r1
 190:	d4 f3       	brlt	.-12     	; 0x186 <PEDESTRIAN_MODE+0x10a>
		{
			Timer0_Delay_250mSec();
		}		
		LEDs_Blink();
 192:	0e 94 19 01 	call	0x232	; 0x232 <LEDs_Blink>
		LED_ON_OFF(PED_PORT,GREEN_PED_PIN, LOW);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(CARS_PORT,RED_CARS_PIN, LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>

	}
	
	LED_ON_OFF(PED_PORT,RED_PED_PIN, HIGH);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
	LED_ON_OFF(CARS_PORT,GREEN_CARS_PIN, HIGH);
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>

}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <__vector_1>:
//////////////////////////////////////////////////////////////////////////
//Interrupt Service Routine 											//
//////////////////////////////////////////////////////////////////////////
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	Timer0_Delay_250mSec();  // Wait for De bouncing  and  Long  Press Detection
 1e6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
	
	if(Button_read(Button_2_PORT, Button_2_PIN) == LOW)   // To Handle Button Long Press
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 0e 01 	call	0x21c	; 0x21c <Button_read>
 1f2:	81 11       	cpse	r24, r1
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <__vector_1+0x36>
	{
		PEDESTRIAN_MODE();
 1f6:	0e 94 3e 00 	call	0x7c	; 0x7c <PEDESTRIAN_MODE>
	}
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <Button_read>:


//button read
EN_Pinvalue_t Button_read(EN_PortNo_t buttonPort, EN_PinNo_t buttonPin)
{
	EN_Pinvalue_t Button_State = DIO_read(buttonPort,buttonPin);
 21c:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_read>
	return Button_State;
 220:	08 95       	ret

00000222 <LED_ON_OFF>:
	}
}

void LED_TOG(EN_PortNo_t LED_PORT , EN_PinNo_t LED_PIN)
{
	DIO_toggle(LED_PORT,LED_PIN);   // Toggle LED
 222:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_write>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	11 f4       	brne	.+4      	; 0x22e <LED_ON_OFF+0xc>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	08 95       	ret
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <LEDs_Blink>:

void LEDs_Blink()
{
	static uint8_t Counter = 0;  
	
	while(Counter <= 4)
 232:	1d c0       	rjmp	.+58     	; 0x26e <LEDs_Blink+0x3c>
	{
		LED_ON_OFF(PORT_A,PIN1,HIGH);
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PORT_B,PIN1,HIGH);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		Timer0_Delay_250mSec();
 248:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
		
		LED_ON_OFF(PORT_A,PIN1,LOW);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		LED_ON_OFF(PORT_B,PIN1,LOW);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		Timer0_Delay_250mSec();
 260:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
		
		Counter++;
 264:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Counter.1663>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Counter.1663>

void LEDs_Blink()
{
	static uint8_t Counter = 0;  
	
	while(Counter <= 4)
 26e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Counter.1663>
 272:	85 30       	cpi	r24, 0x05	; 5
 274:	f8 f2       	brcs	.-66     	; 0x234 <LEDs_Blink+0x2>
		LED_ON_OFF(PORT_B,PIN1,LOW);
		Timer0_Delay_250mSec();
		
		Counter++;
	}
	Counter = 0;
 276:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Counter.1663>
 27a:	08 95       	ret

0000027c <LED_PEDS_YELLOW_Blink>:

void LED_PEDS_YELLOW_Blink()
{
	static uint8_t Counter = 0;
	
	while(Counter <= 4)
 27c:	13 c0       	rjmp	.+38     	; 0x2a4 <LED_PEDS_YELLOW_Blink+0x28>
	{
		LED_ON_OFF(PORT_B,PIN1, HIGH);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		Timer0_Delay_250mSec();
 288:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
		
		LED_ON_OFF(PORT_B, PIN1,LOW);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 11 01 	call	0x222	; 0x222 <LED_ON_OFF>
		Timer0_Delay_250mSec();
 296:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
		
		Counter++;
 29a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

void LED_PEDS_YELLOW_Blink()
{
	static uint8_t Counter = 0;
	
	while(Counter <= 4)
 2a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2a8:	85 30       	cpi	r24, 0x05	; 5
 2aa:	48 f3       	brcs	.-46     	; 0x27e <LED_PEDS_YELLOW_Blink+0x2>
		LED_ON_OFF(PORT_B, PIN1,LOW);
		Timer0_Delay_250mSec();
		
		Counter++;
	}
	Counter = 0;
 2ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 2b0:	08 95       	ret

000002b2 <DIO_write>:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
		default    :  break;

	}
}
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	11 f1       	breq	.+68     	; 0x2fa <DIO_write+0x48>
 2b6:	30 f0       	brcs	.+12     	; 0x2c4 <DIO_write+0x12>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	d1 f1       	breq	.+116    	; 0x330 <DIO_write+0x7e>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	09 f4       	brne	.+2      	; 0x2c2 <DIO_write+0x10>
 2c0:	52 c0       	rjmp	.+164    	; 0x366 <DIO_write+0xb4>
 2c2:	6c c0       	rjmp	.+216    	; 0x39c <DIO_write+0xea>
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	61 f4       	brne	.+24     	; 0x2e0 <DIO_write+0x2e>
 2c8:	2b b3       	in	r18, 0x1b	; 27
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_write+0x22>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_write+0x1e>
 2d8:	82 2b       	or	r24, r18
 2da:	8b bb       	out	0x1b, r24	; 27
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	08 95       	ret
 2e0:	2b b3       	in	r18, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_write+0x3a>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_write+0x36>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	61 f4       	brne	.+24     	; 0x316 <DIO_write+0x64>
 2fe:	28 b3       	in	r18, 0x18	; 24
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write+0x58>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write+0x54>
 30e:	82 2b       	or	r24, r18
 310:	88 bb       	out	0x18, r24	; 24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	08 95       	ret
 316:	28 b3       	in	r18, 0x18	; 24
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_write+0x70>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_write+0x6c>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	88 bb       	out	0x18, r24	; 24
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	61 f4       	brne	.+24     	; 0x34c <DIO_write+0x9a>
 334:	25 b3       	in	r18, 0x15	; 21
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_write+0x8e>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_write+0x8a>
 344:	82 2b       	or	r24, r18
 346:	85 bb       	out	0x15, r24	; 21
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	08 95       	ret
 34c:	25 b3       	in	r18, 0x15	; 21
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0xa6>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0xa2>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	85 bb       	out	0x15, r24	; 21
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	61 f4       	brne	.+24     	; 0x382 <DIO_write+0xd0>
 36a:	22 b3       	in	r18, 0x12	; 18
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_write+0xc4>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_write+0xc0>
 37a:	82 2b       	or	r24, r18
 37c:	82 bb       	out	0x12, r24	; 18
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
 382:	22 b3       	in	r18, 0x12	; 18
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_write+0xdc>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_write+0xd8>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	82 bb       	out	0x12, r24	; 18
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
 39c:	08 95       	ret

0000039e <DIO_read>:
EN_Pinvalue_t DIO_read(EN_PortNo_t portNumber, EN_PinNo_t pinNumber)
{	
	EN_Pinvalue_t Pin_Output;
	switch(portNumber)
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	e1 f0       	breq	.+56     	; 0x3da <DIO_read+0x3c>
 3a2:	30 f0       	brcs	.+12     	; 0x3b0 <DIO_read+0x12>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	71 f1       	breq	.+92     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	09 f4       	brne	.+2      	; 0x3ae <DIO_read+0x10>
 3ac:	40 c0       	rjmp	.+128    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3ae:	53 c0       	rjmp	.+166    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		case PORT_A:
		Pin_Output = GET_BIT(PINA,pinNumber);
 3b0:	49 b3       	in	r20, 0x19	; 25
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	9c 01       	movw	r18, r24
 3b8:	06 2e       	mov	r0, r22
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_read+0x22>
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_read+0x1e>
 3c4:	84 2f       	mov	r24, r20
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	82 23       	and	r24, r18
 3ca:	93 23       	and	r25, r19
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_read+0x34>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_read+0x30>
 3d6:	98 2f       	mov	r25, r24
		break;
 3d8:	3e c0       	rjmp	.+124    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		case PORT_B:
		Pin_Output = GET_BIT(PINB,pinNumber);
 3da:	46 b3       	in	r20, 0x16	; 22
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	9c 01       	movw	r18, r24
 3e2:	06 2e       	mov	r0, r22
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_read+0x4c>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_read+0x48>
 3ee:	84 2f       	mov	r24, r20
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	82 23       	and	r24, r18
 3f4:	93 23       	and	r25, r19
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_read+0x5e>
 3f8:	95 95       	asr	r25
 3fa:	87 95       	ror	r24
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_read+0x5a>
 400:	98 2f       	mov	r25, r24
		break;
 402:	29 c0       	rjmp	.+82     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		case PORT_C:
		Pin_Output = GET_BIT(PINC,pinNumber);
 404:	43 b3       	in	r20, 0x13	; 19
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	9c 01       	movw	r18, r24
 40c:	06 2e       	mov	r0, r22
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	84 2f       	mov	r24, r20
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	82 23       	and	r24, r18
 41e:	93 23       	and	r25, r19
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	95 95       	asr	r25
 424:	87 95       	ror	r24
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	98 2f       	mov	r25, r24
		break;
 42c:	14 c0       	rjmp	.+40     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		case PORT_D:
		Pin_Output = GET_BIT(PIND,pinNumber);
 42e:	40 b3       	in	r20, 0x10	; 16
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	9c 01       	movw	r18, r24
 436:	06 2e       	mov	r0, r22
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	84 2f       	mov	r24, r20
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	82 23       	and	r24, r18
 448:	93 23       	and	r25, r19
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	95 95       	asr	r25
 44e:	87 95       	ror	r24
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	98 2f       	mov	r25, r24
		break;
	}
	return Pin_Output;
}
 456:	89 2f       	mov	r24, r25
 458:	08 95       	ret

0000045a <main>:
#include "Timer.h"


int main(void)
{
	SET_BIT(DDRC,PIN1);
 45a:	84 b3       	in	r24, 0x14	; 20
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	84 bb       	out	0x14, r24	; 20
	Timer0_INIT();
 460:	0e 94 3f 02 	call	0x47e	; 0x47e <Timer0_INIT>
	GIE_Global_Enable();
 464:	0e 94 4f 02 	call	0x49e	; 0x49e <GIE_Global_Enable>
	

	while(1)
	{
	SET_BIT(PORTC,PIN1);
 468:	85 b3       	in	r24, 0x15	; 21
 46a:	82 60       	ori	r24, 0x02	; 2
 46c:	85 bb       	out	0x15, r24	; 21
	Timer0_Delay_250mSec();
 46e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
	CLEAR_BIT(PORTC,PIN1);
 472:	85 b3       	in	r24, 0x15	; 21
 474:	8d 7f       	andi	r24, 0xFD	; 253
 476:	85 bb       	out	0x15, r24	; 21
	Timer0_Delay_250mSec();
 478:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Timer0_Delay_250mSec>
 47c:	f5 cf       	rjmp	.-22     	; 0x468 <main+0xe>

0000047e <Timer0_INIT>:

#include "Timer.h"

Timer_State Timer0_INIT(){
	/* Select normal mode */
	CLEAR_BIT(TCCR0 , TCCR0_WGM00);
 47e:	83 b7       	in	r24, 0x33	; 51
 480:	8f 7b       	andi	r24, 0xBF	; 191
 482:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0 , TCCR0_WGM01);
 484:	83 b7       	in	r24, 0x33	; 51
 486:	87 7f       	andi	r24, 0xF7	; 247
 488:	83 bf       	out	0x33, r24	; 51

	/* Select prescaler 1024 */
	SET_BIT(TCCR0, TCCR0_CS00);
 48a:	83 b7       	in	r24, 0x33	; 51
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, TCCR0_CS02);
 490:	83 b7       	in	r24, 0x33	; 51
 492:	84 60       	ori	r24, 0x04	; 4
 494:	83 bf       	out	0x33, r24	; 51

	/*Set preload value to reach 0.25 sec*/
	TCNT0 = 12;		
 496:	8c e0       	ldi	r24, 0x0C	; 12
 498:	82 bf       	out	0x32, r24	; 50
	//	return Timer_Ok;
	//}			
	//	
	//
	return Timer_Ok;
}
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret

0000049e <GIE_Global_Enable>:


void GIE_Global_Enable()
{
	/*Enable the global Interrupt */
	SET_BIT(SREG , SREG_I);
 49e:	8f b7       	in	r24, 0x3f	; 63
 4a0:	80 68       	ori	r24, 0x80	; 128
 4a2:	8f bf       	out	0x3f, r24	; 63
 4a4:	08 95       	ret

000004a6 <Timer0_Delay_250mSec>:

void Timer0_Delay_250mSec()
{
	static uint8_t OverFlowCounter = 0;
	
	while(OverFlowCounter <= 1)
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <Timer0_Delay_250mSec+0x14>
	{
		if(GET_BIT(TIFR, TIFR_TOV0) == HIGH)
 4a8:	08 b6       	in	r0, 0x38	; 56
 4aa:	00 fe       	sbrs	r0, 0
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <Timer0_Delay_250mSec+0x14>
		{
			OverFlowCounter++;
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OverFlowCounter.1625>
			SET_BIT(TIFR, TIFR_TOV0);
 4b4:	88 b7       	in	r24, 0x38	; 56
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	88 bf       	out	0x38, r24	; 56

void Timer0_Delay_250mSec()
{
	static uint8_t OverFlowCounter = 0;
	
	while(OverFlowCounter <= 1)
 4ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <OverFlowCounter.1625>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	98 f3       	brcs	.-26     	; 0x4a8 <Timer0_Delay_250mSec+0x2>
			OverFlowCounter++;
			SET_BIT(TIFR, TIFR_TOV0);
		}
		else{}
	}
	OverFlowCounter = 0;
 4c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <OverFlowCounter.1625>
	TCNT0 = 12;
 4c6:	8c e0       	ldi	r24, 0x0C	; 12
 4c8:	82 bf       	out	0x32, r24	; 50
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
